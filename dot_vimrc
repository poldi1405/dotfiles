set shell=/bin/bash

" vim Configuration
set      nocompatible  " don't use compability-mode
syntax   on            " enable syntax-highlighting
filetype off           " disable filetype-override
set      noerrorbells  " no BEEEP! on errors
set      novisualbell  " no visual alert
set      showmatch     " highlight matching braces
set      confirm       " show confirmation dialogs
set      ruler         " show row an column indicator

" Line-Settings
set number        " show line numbers
set linebreak     " break lines at word
set showbreak=:>  " set wrapped-line indicator
set nofoldenable  " do not fold code

" Tab-Settings
set autoindent   " autoindent new lines
set noexpandtab  " do NOT make it spaces
set tabstop   =4 " tabs look like 4 spaces
set shiftwidth=4 " indent corresponds to single tab

" Search & Replace
set hlsearch      " highlight all searchresults
set smartcase     " enable smart-case search
set gdefault      " automatically replace all matches on a line
set ignorecase    " search case-insensitive
set incsearch     " search incrementally


set  rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle Plugin Manager
Plugin 'VundleVim/Vundle.vim'

" Advanced Features for editing Go
Plugin 'fatih/vim-go'

" Gruvbox Colorscheme
Plugin 'morhetz/gruvbox'

" Git Integration
Plugin 'tpope/vim-fugitive'

" Syntax Checks
Plugin 'scrooloose/syntastic'

" Statusbar
Plugin 'vim-airline/vim-airline'

" Tree View
Plugin 'scrooloose/nerdtree'
" and Git support
Plugin 'Xuyuanp/nerdtree-git-plugin'

" Code Completion
Plugin 'Valloric/YouCompleteMe'

" Comment-out-stuff
Plugin 'tpope/vim-commentary'

" Markdown Support
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" Auto-Add Delimiters
Plugin 'raimondi/delimitmate'

" Language Support
Plugin 'sheerun/vim-polyglot'

" Highlight trailing spaces
Plugin 'bronson/vim-trailing-whitespace'

" Detect Pasting and :set paste
Plugin 'roxma/vim-paste-easy'

" sweet helpers
Plugin 'tpope/vim-eunuch'

" text-aligning
Plugin 'tommcdo/vim-lion'

" expand word-definition to include CamelCase
Plugin 'chaoren/vim-wordmotion'

" add Git signs to gutter
Plugin 'airblade/vim-gitgutter'

" automatically save
Plugin '907th/vim-auto-save'

" automatically close XML-like tags
Plugin 'tpope/vim-ragtag'

" surround stuff using cs[character]
Plugin 'tpope/vim-surround'

" repeat actions on .
Plugin 'tpope/vim-repeat'

" Sublime-like Ctrl+P
Plugin 'ctrlpvim/ctrlp.vim'

" smooth scrolling using ^F ^B
Plugin 'psliwka/vim-smoothie'
call     vundle#end()        " required
filetype plugin indent on    " required

" Gruvbox Configuration
colorscheme gruvbox
set         background=dark

" YouCompleteMe
let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_complete_in_strings             = 0
let g:ycm_key_list_select_completion      = ['<TAB>']
let g:ycm_key_list_previous_completion    = ['<S-TAB>']
let g:ycm_key_list_stop_completion        = ['<Up>', '<Down>']

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 1
let g:syntastic_check_on_open            = 1
let g:syntastic_check_on_wq              = 0

" Airline Configuration
let g:airline_powerline_fonts              = 1
let g:airline#extensions#tabline#enabled   = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

" NerdTree Configuration
autocmd StdinReadPre                  * let s:std_in=1
autocmd VimEnter                      * if  argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
map     <C-t>                         :NERDTreeToggle<CR>
let     g:NERDTreeDirArrowExpandable  = "▷"
let     g:NERDTreeDirArrowCollapsible = "◢"

" vim-lion Configuration
let g:lion_squeeze_spaces = 1
nmap <C-l> :gl

" wordmotion-Configuration
nmap cw ce

" gitgutter Configuration
let g:gitgutter_grep                    = 'rg'
let g:gitgutter_map_keys                = 0
let g:gitgutter_sign_added              = '+'
let g:gitgutter_sign_modified           = '~'
let g:gitgutter_sign_modified_removed   = '~-'
let g:gitgutter_sign_removed            = '-'
let g:gitgutter_sign_removed_first_line = '◥'
set updatetime                          =300

" auto-save Configuration
let g:auto_save        = 1
let g:auto_save_silent = 1
let g:auto_save_events = ["InsertLeave", "TextChanged", "FocusLost"]

" Write as Sudo
cnoreabbrev W SudoWrite

" navigate split windows with Ctrl+Direction, maximise with Ctrl+M
nmap <silent> <C-Up>    :wincmd k<CR>
nmap <silent> <C-Down>  :wincmd j<CR>
nmap <silent> <C-Left>  :wincmd h<CR>
nmap <silent> <C-Right> :wincmd l<CR>
map  <C-M>    <C-W>_

" Shift+q to close file
nmap Q :q<CR>

" select/list tabs and enable file menu on F5
map      tz          :bn<cr>
map      tr          :bp<cr>
map      tc          :bd<cr>
map      tl          :buffers<cr>
map      gb          :b#<cr>
nnoremap <F4>        :buffers<cr>:buffer<Space>

" Reload vim Config
nmap <F5> :source ~/.vimrc<cr>

" Ctrl+(Up/Down) move line up/down
map <C-UP>   ddkP
map <C-Down> ddp

" Language-specific abbreviations
"  Go
autocmd BufNewFile,BufRead *.go ab func func   (){<CR><CR>}
autocmd BufNewFile,BufRead *.go ab imp  import (<CR><CR>)

hi  Normal guibg=NONE ctermbg=NONE
map üj     :set       list<cr>:set nolist<cr>
set list
set nolist
